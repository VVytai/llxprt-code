name: 'E2E Tests'

on:
  push:
    branches:
      - 'main'
  merge_group:

jobs:
  e2e-test-linux:
    name: 'E2E Test (Linux) - ${{ matrix.sandbox }}'
    runs-on: 'ubuntu-latest'
    strategy:
      matrix:
        sandbox:
          - 'sandbox:none'
          # Temporarily disable sandbox:docker until OAuth issue is resolved
          # - 'sandbox:docker'
        node-version:
          - '20.x'
          - '22.x'
          - '24.x'
    steps:
      - name: 'Checkout'
        uses: 'actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8' # ratchet:actions/checkout@v5

      - name: 'Set up Node.js ${{ matrix.node-version }}'
        uses: 'actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020' # ratchet:actions/setup-node@v4
        with:
          node-version: '${{ matrix.node-version }}'
          cache: 'npm'

      - name: 'Install dependencies'
        run: |-
          npm ci

      - name: 'Build project'
        run: |-
          npm run build

      - name: 'Create bundle'
        run: |-
          echo "Current directory: $(pwd)"
          echo "Directory contents before bundle:"
          ls -la
          npm run bundle
          echo "Directory contents after bundle:"
          ls -la
          echo "Bundle directory contents:"
          ls -la bundle/ || echo "Bundle directory not found"

      - name: 'Set up Docker'
        if: |-
          ${{ matrix.sandbox == 'sandbox:docker' }}
        uses: 'docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435' # ratchet:docker/setup-buildx-action@v3

      - name: 'Build sandbox Docker image'
        if: |-
          ${{ matrix.sandbox == 'sandbox:docker' }}
        env:
          # Tell the build script to use docker for sandboxing
          LLXPRT_SANDBOX: 'docker'
        run: |-
          # Build the sandbox image locally with the same tag that's in package.json
          # This matches Google's approach - build locally, no registry needed
          echo "Building sandbox image..."
          npm run build:sandbox

          # Verify the image was built
          echo "Docker images after build:"
          docker images

          # The image should be tagged as specified in package.json
          if docker images | grep -q "ghcr.io/acoliver/llxprt-code/sandbox"; then
            echo "✓ Sandbox image built successfully"
            docker images | grep "ghcr.io/acoliver/llxprt-code/sandbox"
          else
            echo "✗ Sandbox image not found after build!"
            echo "Expected to find image matching: ghcr.io/acoliver/llxprt-code/sandbox"
            exit 1
          fi

      - name: 'Set up Podman'
        if: |-
          ${{ matrix.sandbox == 'sandbox:podman' }}
        uses: 'redhat-actions/podman-login@4934294ad0449894bcd1e9f191899d7292469603' # ratchet:redhat-actions/podman-login@v1
        with:
          registry: 'docker.io'
          username: '${{ secrets.DOCKERHUB_USERNAME }}'
          password: '${{ secrets.DOCKERHUB_TOKEN }}'

      - name: 'Run E2E tests'
        env:
          # Use OpenRouter as a cost-effective alternative to Google's API
          OPENAI_API_KEY: '${{ secrets.OPENROUTER_API_KEY }}'
          OPENAI_BASE_URL: 'https://openrouter.ai/api/v1'
          LLXPRT_DEFAULT_MODEL: 'google/gemini-2.5-flash'
          LLXPRT_DEFAULT_PROVIDER: 'openai'
          # Set auth type to none since we're not using Google services in these tests
          LLXPRT_AUTH_TYPE: 'none'
          # Suppress browser launch for OAuth (important for CI)
          NO_BROWSER: 'true'
          LLXPRT_NO_BROWSER_AUTH: 'true'
          CI: 'true'
          LLXPRT_SANDBOX: '${{ matrix.sandbox }}'
          VERBOSE: 'true'
          KEEP_OUTPUT: 'true'
        run: |-
          npm run "test:integration:${LLXPRT_SANDBOX}"

  e2e-test-macos:
    name: 'E2E Test - macOS'
    runs-on: 'macos-latest'
    steps:
      - name: 'Checkout'
        uses: 'actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8' # ratchet:actions/checkout@v5

      - name: 'Set up Node.js'
        uses: 'actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020' # ratchet:actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache: 'npm'

      - name: 'Install dependencies'
        run: |-
          npm ci

      - name: 'Build project'
        run: |-
          npm run build

      - name: 'Create bundle'
        run: |-
          npm run bundle

      - name: 'Run E2E tests'
        env:
          # Use OpenRouter as a cost-effective alternative to Google's API
          OPENAI_API_KEY: '${{ secrets.OPENROUTER_API_KEY }}'
          OPENAI_BASE_URL: 'https://openrouter.ai/api/v1'
          LLXPRT_DEFAULT_MODEL: 'google/gemini-2.5-flash'
          LLXPRT_DEFAULT_PROVIDER: 'openai'
          # Set auth type to none since we're not using Google services in these tests
          LLXPRT_AUTH_TYPE: 'none'
          # Suppress browser launch for OAuth (important for CI)
          NO_BROWSER: 'true'
          LLXPRT_NO_BROWSER_AUTH: 'true'
          CI: 'true'
          VERBOSE: 'true'
          KEEP_OUTPUT: 'true'
        run: |-
          npm run test:e2e

  e2e-test-windows:
    name: 'E2E Test - Windows'
    runs-on: 'windows-latest'
    steps:
      - name: 'Checkout'
        uses: 'actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8' # ratchet:actions/checkout@v5

      - name: 'Set up Node.js'
        uses: 'actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020' # ratchet:actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache: 'npm'

      - name: 'Ensure npx is available (Windows fix)'
        run: |-
          echo "Checking npx availability..."
          npx --version || npm install -g npm@latest
          npx --version

      - name: 'Install dependencies'
        run: |-
          npm ci

      - name: 'Build project'
        run: |-
          npm run build

      - name: 'Create bundle'
        run: |-
          npm run bundle

      - name: 'Run E2E tests'
        env:
          # Use OpenRouter as a cost-effective alternative to Google's API
          OPENAI_API_KEY: '${{ secrets.OPENROUTER_API_KEY }}'
          OPENAI_BASE_URL: 'https://openrouter.ai/api/v1'
          LLXPRT_DEFAULT_MODEL: 'google/gemini-2.5-flash'
          LLXPRT_DEFAULT_PROVIDER: 'openai'
          # Set auth type to none since we're not using Google services in these tests
          LLXPRT_AUTH_TYPE: 'none'
          # Suppress browser launch for OAuth (important for CI)
          NO_BROWSER: 'true'
          LLXPRT_NO_BROWSER_AUTH: 'true'
          CI: 'true'
          VERBOSE: 'true'
          KEEP_OUTPUT: 'true'
        run: |-
          npm run test:e2e
