name: Release

on:
  schedule:
    # Runs every day at midnight UTC for the nightly release.
    - cron: '0 0 * * *'
  workflow_dispatch:
    inputs:
      version:
        description: 'The version to release (e.g., v0.1.11). Required for manual patch releases.'
        required: false # Not required for scheduled runs
        type: string
      ref:
        description: 'The branch or ref (full git sha) to release from.'
        required: true
        type: string
        default: 'main'
      dry_run:
        description: 'Run a dry-run of the release process; no branches, npm packages or GitHub releases will be created.'
        required: true
        type: boolean
        default: true
      create_nightly_release:
        description: 'Auto apply the nightly release tag, input version is ignored.'
        required: false
        type: boolean
        default: false
      create_preview_release:
        description: 'Create a beta release with current version (e.g., 0.1.21-beta.0).'
        required: false
        type: boolean
        default: false
      force_skip_tests:
        description: 'Select to skip the "Run Tests" step in testing. Prod releases should run tests'
        required: false
        type: boolean
        default: false
      # Remove API provider inputs - these will come from repository secrets/variables

jobs:
  release:
    runs-on: ubuntu-latest
    environment:
      name: production-release
      url: ${{ github.server_url }}/${{ github.repository }}/releases/tag/${{ steps.version.outputs.RELEASE_TAG }}
    if: github.repository == 'acoliver/llxprt-code'
    permissions:
      contents: write
      packages: write
      id-token: write
      issues: write # For creating issues on failure
    outputs:
      RELEASE_TAG: ${{ steps.version.outputs.RELEASE_TAG }}

    steps:
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
        with:
          ref: ${{ github.sha }}
          fetch-depth: 0

      - name: Set booleans for simplified logic
        id: vars
        run: |
          is_nightly="false"
          if [[ "${{ github.event_name }}" == "schedule" || "${{ github.event.inputs.create_nightly_release }}" == "true" ]]; then
            is_nightly="true"
          fi
          echo "is_nightly=${is_nightly}" >> "$GITHUB_OUTPUT"

          is_preview="false"
          if [[ "${{ github.event.inputs.create_preview_release }}" == "true" ]]; then
            is_preview="true"
          fi
          echo "is_preview=${is_preview}" >> "$GITHUB_OUTPUT"

          is_dry_run="false"
          if [[ "${{ github.event.inputs.dry_run }}" == "true" ]]; then
            is_dry_run="true"
          fi
          echo "is_dry_run=${is_dry_run}" >> "$GITHUB_OUTPUT"

      - name: Setup Node.js
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4
        with:
          node-version: '24'
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci

      - name: Get the version
        id: version
        run: |
          VERSION_JSON=$(node scripts/get-release-version.js)
          echo "RELEASE_TAG=$(echo "$VERSION_JSON" | jq -r .releaseTag)" >> "$GITHUB_OUTPUT"
          echo "RELEASE_VERSION=$(echo "$VERSION_JSON" | jq -r .releaseVersion)" >> "$GITHUB_OUTPUT"
          echo "NPM_TAG=$(echo "$VERSION_JSON" | jq -r .npmTag)" >> "$GITHUB_OUTPUT"
        env:
          IS_NIGHTLY: ${{ steps.vars.outputs.is_nightly }}
          IS_PREVIEW: ${{ steps.vars.outputs.is_preview }}
          MANUAL_VERSION: ${{ inputs.version }}

      - name: Run Preflight Checks
        if: github.event.inputs.force_skip_tests != 'true'
        run: node scripts/preflight-ci.js
        env:
          # Provider configuration from repository secrets/variables
          OPENAI_API_KEY: ${{ secrets[vars.KEY_VAR_NAME] }}
          OPENAI_BASE_URL: ${{ vars.OPENAI_BASE_URL }}
          LLXPRT_DEFAULT_MODEL: ${{ vars.LLXPRT_DEFAULT_MODEL }}
          LLXPRT_DEFAULT_PROVIDER: ${{ vars.LLXPRT_DEFAULT_PROVIDER }}
          LLXPRT_AUTH_TYPE: none

      - name: Build Bundle for Integration Tests
        run: npm run bundle

      - name: Run Integration Tests
        if: github.event.inputs.force_skip_tests != 'true'
        run: |
          npm run test:integration:sandbox:none
          # Skipping Docker tests due to flakiness
          # npm run test:integration:sandbox:docker
        env:
          # Provider configuration from repository secrets/variables
          OPENAI_API_KEY: ${{ secrets[vars.KEY_VAR_NAME] }}
          OPENAI_BASE_URL: ${{ vars.OPENAI_BASE_URL }}
          LLXPRT_DEFAULT_MODEL: ${{ vars.LLXPRT_DEFAULT_MODEL }}
          LLXPRT_DEFAULT_PROVIDER: ${{ vars.LLXPRT_DEFAULT_PROVIDER }}
          LLXPRT_AUTH_TYPE: none

      - name: Configure Git User
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Create and switch to a release branch
        id: release_branch
        run: |
          BRANCH_NAME="release/${{ steps.version.outputs.RELEASE_TAG }}"
          git switch -c "$BRANCH_NAME"
          echo "BRANCH_NAME=${BRANCH_NAME}" >> "$GITHUB_OUTPUT"

      - name: Update package versions
        run: |
          npm run release:version ${{ steps.version.outputs.RELEASE_VERSION }}

      - name: Commit and Conditionally Push package versions
        run: |
          git add package.json package-lock.json packages/*/package.json || true
          git commit -m "chore(release): ${{ steps.version.outputs.RELEASE_TAG }}"
          if [[ "${{ steps.vars.outputs.is_dry_run }}" == "false" ]]; then
            echo "Pushing release branch to remote..."
            git push --set-upstream origin ${{ steps.release_branch.outputs.BRANCH_NAME }} --follow-tags --force
          else
            echo "Dry run enabled. Skipping push."
          fi

      - name: Build and Prepare Packages
        run: |
          rm -rf packages/*/dist
          npm run build:packages
          npm run bundle
          npm run prepare:package

      - name: Configure npm for publishing
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4
        with:
          node-version: '24'
          registry-url: 'https://registry.npmjs.org/'
          scope: '@vybestack'

      - name: Publish @vybestack/llxprt-code-core
        run: npm publish --workspace=@vybestack/llxprt-code-core --tag=${{ steps.version.outputs.NPM_TAG }} ${{ steps.vars.outputs.is_dry_run == 'true' && '--dry-run' || '' }}
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Install latest core package
        if: steps.vars.outputs.is_dry_run == 'false'
        run: npm install @vybestack/llxprt-code-core@${{ steps.version.outputs.RELEASE_VERSION }} --workspace=@vybestack/llxprt-code --save-exact

      - name: Publish @vybestack/llxprt-code
        run: npm publish --workspace=@vybestack/llxprt-code --tag=${{ steps.version.outputs.NPM_TAG }} ${{ steps.vars.outputs.is_dry_run == 'true' && '--dry-run' || '' }}
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Generate Release Notes
        if: ${{ steps.vars.outputs.is_dry_run == 'false' }}
        id: release_notes
        run: |
          # Get the last stable release tag (excluding pre-release tags)
          LAST_STABLE_TAG=$(git tag -l 'v*' | grep -v '\-' | sort -V | tail -n 1)
          if [ -z "$LAST_STABLE_TAG" ]; then
            # If no stable tag, get the most recent tag
            LAST_STABLE_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          fi
          if [ -z "$LAST_STABLE_TAG" ]; then
            echo "No previous release tag found, using first commit"
            LAST_STABLE_TAG=$(git rev-list --max-parents=0 HEAD)
          fi

          # Save last tag for comparison link
          echo "LAST_TAG=$LAST_STABLE_TAG" >> "$GITHUB_OUTPUT"

          # Get commit messages since last tag
          echo "Getting commits from $LAST_STABLE_TAG to HEAD"
          git log --pretty=format:"- %s (%h)" "$LAST_STABLE_TAG"..HEAD > commits.txt

          # Generate release notes with LLxprt or fall back to basic format
          echo "Attempting to generate release notes with LLxprt Code..."

          # Create the prompt in a variable
          PROMPT="Generate professional release notes for LLxprt Code version ${{ steps.version.outputs.RELEASE_TAG }} and write them to a file called 'generated-notes.md'.

          Format the output as follows:
          1. Start with 'Release ${{ steps.version.outputs.RELEASE_TAG }}'
          2. Add a note about alpha/beta/gamma naming (if applicable): 'Note in LLxprt alpha/beta/gamma do not denote maturity, it is that we like to have our releases match the upstream gemini-cli project but sometimes we have major features or fixes we need to get into the hands of hungry users in advance.'
          3. Include 'Installation & Upgrade' section with npm commands including the version tag
          4. Add 'Major Features' section summarizing the most important changes
          5. Add 'Changes' section with the detailed commit list
          6. NO EMOJIS anywhere

          Here are the commits since $LAST_STABLE_TAG:
          $(cat commits.txt)

          IMPORTANT: Use the write_file tool to save the release notes to 'generated-notes.md'. The file_path should be 'generated-notes.md' and content should be the formatted release notes. Do not output them to stdout."

          # Try LLxprt generation using configured provider
          set +e
          npx @vybestack/llxprt-code@latest \
            --provider ${{ vars.LLXPRT_DEFAULT_PROVIDER }} \
            --model ${{ vars.LLXPRT_DEFAULT_MODEL }} \
            --key "${{ secrets[vars.KEY_VAR_NAME] }}" \
            --baseurl ${{ vars.OPENAI_BASE_URL }} \
            --yolo \
            --prompt "$PROMPT" > /dev/null 2>&1
          LLXPRT_EXIT=$?
          set -e

          # Check if generation succeeded
          if [ $LLXPRT_EXIT -eq 0 ] && [ -s generated-notes.md ]; then
            echo "Using LLxprt-generated release notes"
            cp generated-notes.md release-notes.md
          else
            echo "Falling back to basic release notes"
            # Write basic release notes
            echo "## Release ${{ steps.version.outputs.RELEASE_TAG }}" > release-notes.md
            echo "" >> release-notes.md

            # Add note for pre-release versions
            if [[ "${{ steps.version.outputs.RELEASE_TAG }}" =~ - ]]; then
              echo "Note in LLxprt alpha/beta/gamma do not denote maturity, it is that we like to have our releases match the upstream gemini-cli project but sometimes we have major features or fixes we need to get into the hands of hungry users in advance." >> release-notes.md
              echo "" >> release-notes.md
            fi

            echo "### Installation & Upgrade" >> release-notes.md
            echo "" >> release-notes.md
            echo "#### Install" >> release-notes.md
            echo '```bash' >> release-notes.md
            echo "npm install -g @vybestack/llxprt-code@${{ steps.version.outputs.RELEASE_VERSION }}" >> release-notes.md
            echo '```' >> release-notes.md
            echo "" >> release-notes.md
            echo "#### Upgrade" >> release-notes.md
            echo '```bash' >> release-notes.md
            echo "npm update -g @vybestack/llxprt-code@${{ steps.version.outputs.RELEASE_VERSION }}" >> release-notes.md
            echo '```' >> release-notes.md
            echo "" >> release-notes.md
            echo "### Changes" >> release-notes.md
            echo "" >> release-notes.md
            cat commits.txt >> release-notes.md
          fi

          # Add comparison link if we have a real previous tag
          if [[ "$LAST_STABLE_TAG" != $(git rev-list --max-parents=0 HEAD) ]]; then
            echo "" >> release-notes.md
            echo "---" >> release-notes.md
            echo "" >> release-notes.md
            echo "**Full Changelog**: https://github.com/${{ github.repository }}/compare/${LAST_STABLE_TAG}...${{ steps.version.outputs.RELEASE_TAG }}" >> release-notes.md
          fi

          echo "Release notes generated"

      - name: Create GitHub Release and Tag
        if: ${{ steps.vars.outputs.is_dry_run == 'false' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          RELEASE_BRANCH: ${{ steps.release_branch.outputs.BRANCH_NAME }}
        run: |
          gh release create ${{ steps.version.outputs.RELEASE_TAG }} \
            bundle/llxprt.js \
            --target "$RELEASE_BRANCH" \
            --title "Release ${{ steps.version.outputs.RELEASE_TAG }}" \
            --notes-file release-notes.md

      - name: Create Issue on Failure
        if: failure()
        run: |
          gh issue create \
            --title "Release Failed for ${{ steps.version.outputs.RELEASE_TAG || 'N/A' }} on $(date +'%Y-%m-%d')" \
            --body "The release workflow failed. See the full run for details: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}" \
            --label "kind/bug,release-failure"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
