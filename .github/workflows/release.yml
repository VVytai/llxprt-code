name: 'Release'

on:
  schedule:
    # Runs every day at midnight UTC for the nightly release.
    - cron: '0 0 * * *'
  workflow_dispatch:
    inputs:
      version:
        description: 'The version to release (e.g., v0.1.11). Required for manual patch releases.'
        required: false # Not required for scheduled runs
        type: 'string'
      ref:
        description: 'The branch or ref (full git sha) to release from.'
        required: true
        type: 'string'
        default: 'main'
      dry_run:
        description: 'Run a dry-run of the release process; no branches, npm packages or GitHub releases will be created.'
        required: true
        type: 'boolean'
        default: true
      create_nightly_release:
        description: 'Auto apply the nightly release tag, input version is ignored.'
        required: false
        type: 'boolean'
        default: false
      force_skip_tests:
        description: 'Select to skip the "Run Tests" step in testing. Prod releases should run tests'
        required: false
        type: 'boolean'
        default: false

jobs:
  release:
    runs-on: 'ubuntu-latest'
    environment:
      name: 'production-release'
      url: '${{ github.server_url }}/${{ github.repository }}/releases/tag/${{ steps.version.outputs.RELEASE_TAG }}'
    if: |-
      ${{ github.repository == 'acoliver/llxprt-code' }}
    permissions:
      contents: 'write'
      packages: 'write'
      id-token: 'write'
      issues: 'write' # For creating issues on failure
    outputs:
      RELEASE_TAG: '${{ steps.version.outputs.RELEASE_TAG }}'

    steps:
      - name: 'Checkout'
        uses: 'actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8' # ratchet:actions/checkout@v5
        with:
          ref: '${{ github.sha }}'
          fetch-depth: 0

      - name: 'Set booleans for simplified logic'
        env:
          CREATE_NIGHTLY_RELEASE: '${{ github.event.inputs.create_nightly_release }}'
          EVENT_NAME: '${{ github.event_name }}'
          DRY_RUN_INPUT: '${{ github.event.inputs.dry_run }}'
        id: 'vars'
        run: |-
          is_nightly="false"
          if [[ "${EVENT_NAME}" == "schedule" || "${CREATE_NIGHTLY_RELEASE}" == "true" ]]; then
            is_nightly="true"
          fi
          echo "is_nightly=${is_nightly}" >> "${GITHUB_OUTPUT}"

          is_dry_run="false"
          if [[ "${DRY_RUN_INPUT}" == "true" ]]; then
            is_dry_run="true"
          fi
          echo "is_dry_run=${is_dry_run}" >> "${GITHUB_OUTPUT}"

      - name: 'Setup Node.js'
        uses: 'actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020' # ratchet:actions/setup-node@v4
        with:
          node-version: '24'
          cache: 'npm'

      - name: 'Install Dependencies'
        run: |-
          npm ci

      - name: 'Get the version'
        id: 'version'
        env:
          IS_NIGHTLY: '${{ steps.vars.outputs.is_nightly }}'
          MANUAL_VERSION: '${{ inputs.version }}'
        run: |-
          VERSION_JSON="$(node scripts/get-release-version.js)"
          echo "RELEASE_TAG=$(echo "${VERSION_JSON}" | jq -r .releaseTag)" >> "${GITHUB_OUTPUT}"
          echo "RELEASE_VERSION=$(echo "${VERSION_JSON}" | jq -r .releaseVersion)" >> "${GITHUB_OUTPUT}"
          echo "NPM_TAG=$(echo "${VERSION_JSON}" | jq -r .npmTag)" >> "${GITHUB_OUTPUT}"

      - name: 'Run Preflight Checks'
        if: |-
          ${{ github.event.inputs.force_skip_tests != 'true' }}
        env:
          GEMINI_API_KEY: '${{ secrets.GEMINI_API_KEY }}'
          OPENAI_API_KEY: '${{ secrets.OPENROUTER_API_KEY }}'
          OPENAI_BASE_URL: 'https://openrouter.ai/api/v1'
          LLXPRT_DEFAULT_MODEL: 'google/gemini-2.5-flash'
          LLXPRT_DEFAULT_PROVIDER: 'openai'
          LLXPRT_AUTH_TYPE: 'none'
        run: |-
          node scripts/preflight-ci.js

      - name: 'Build Bundle for Integration Tests'
        run: |-
          npm run bundle

      - name: 'Run Integration Tests'
        if: |-
          ${{ github.event.inputs.force_skip_tests != 'true' }}
        env:
          GEMINI_API_KEY: '${{ secrets.GEMINI_API_KEY }}'
          OPENAI_API_KEY: '${{ secrets.OPENROUTER_API_KEY }}'
          OPENAI_BASE_URL: 'https://openrouter.ai/api/v1'
          LLXPRT_DEFAULT_MODEL: 'google/gemini-2.5-flash'
          LLXPRT_DEFAULT_PROVIDER: 'openai'
          LLXPRT_AUTH_TYPE: 'none'
        run: |-
          npm run test:integration:sandbox:none
          # Skipping Docker tests due to flakiness
          # npm run test:integration:sandbox:docker

      - name: 'Configure Git User'
        run: |-
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: 'Create and switch to a release branch'
        id: 'release_branch'
        env:
          RELEASE_TAG: '${{ steps.version.outputs.RELEASE_TAG }}'
        run: |-
          BRANCH_NAME="release/${RELEASE_TAG}"
          git switch -c "${BRANCH_NAME}"
          echo "BRANCH_NAME=${BRANCH_NAME}" >> "${GITHUB_OUTPUT}"

      - name: 'Update package versions'
        env:
          RELEASE_VERSION: '${{ steps.version.outputs.RELEASE_VERSION }}'
        run: |-
          npm run release:version "${RELEASE_VERSION}"

      - name: 'Commit and Conditionally Push package versions'
        env:
          BRANCH_NAME: '${{ steps.release_branch.outputs.BRANCH_NAME }}'
          IS_DRY_RUN: '${{ steps.vars.outputs.is_dry_run }}'
          RELEASE_TAG: '${{ steps.version.outputs.RELEASE_TAG }}'
        run: |-
          git add package.json package-lock.json packages/*/package.json packages/*/package-lock.json
          git commit -m "chore(release): ${RELEASE_TAG}"
          if [[ "${IS_DRY_RUN}" == "false" ]]; then
            echo "Pushing release branch to remote..."
            git push --set-upstream origin "${BRANCH_NAME}" --follow-tags
          else
            echo "Dry run enabled. Skipping push."
          fi

      - name: 'Build and Prepare Packages'
        run: |-
          rm -rf packages/*/dist
          npm run build:packages
          npm run bundle
          npm run prepare:package

      - name: 'Configure npm for publishing'
        uses: 'actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020' # ratchet:actions/setup-node@v4
        with:
          node-version: '24'
          registry-url: 'https://registry.npmjs.org/'
          scope: '@vybestack'

      - name: 'Publish @vybestack/llxprt-code-core'
        env:
          IS_DRY_RUN: '${{ steps.vars.outputs.is_dry_run }}'
          NODE_AUTH_TOKEN: '${{ secrets.NPM_TOKEN }}'
          NPM_TAG: '${{ steps.version.outputs.NPM_TAG }}'
        run: |-
          npm publish \
            --dry-run="${IS_DRY_RUN}" \
            --workspace="@vybestack/llxprt-code-core" \
            --tag="${NPM_TAG}"

      - name: 'Install latest core package'
        if: |-
          ${{ steps.vars.outputs.is_dry_run == 'false' }}
        env:
          RELEASE_VERSION: '${{ steps.version.outputs.RELEASE_VERSION }}'
        run: |-
          npm install "@vybestack/llxprt-code-core@${RELEASE_VERSION}" \
          --workspace="@vybestack/llxprt-code" \
          --save-exact

      - name: 'Publish @vybestack/llxprt-code'
        env:
          IS_DRY_RUN: '${{ steps.vars.outputs.is_dry_run }}'
          NODE_AUTH_TOKEN: '${{ secrets.NPM_TOKEN }}'
          NPM_TAG: '${{ steps.version.outputs.NPM_TAG }}'
        run: |-
          npm publish \
            --dry-run="${IS_DRY_RUN}" \
            --workspace="@vybestack/llxprt-code" \
            --tag="${NPM_TAG}"

      - name: 'Generate Release Notes'
        if: |-
          ${{ steps.vars.outputs.is_dry_run == 'false' }}
        id: 'release_notes'
        env:
          RELEASE_TAG: '${{ steps.version.outputs.RELEASE_TAG }}'
          LAST_TAG: '${{ steps.release_notes.outputs.LAST_TAG }}'
          GEMINI_API_KEY: '${{ secrets.GEMINI_API_KEY }}'
          GITHUB_REPOSITORY: '${{ github.repository }}'
        run: |-
          # Get the last release tag
          LAST_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          if [ -z "$LAST_TAG" ]; then
            echo "No previous release tag found, using first commit"
            LAST_TAG=$(git rev-list --max-parents=0 HEAD)
          fi

          # Save last tag for comparison link
          echo "LAST_TAG=${LAST_TAG}" >> "${GITHUB_OUTPUT}"

          # Get commit messages since last tag
          echo "Getting commits from ${LAST_TAG} to HEAD"
          git log --pretty=format:"- %s (%h)" "${LAST_TAG}..HEAD" > commits.txt

          # Generate release notes with LLxprt or fall back to basic format
          echo "Attempting to generate release notes with LLxprt Code..."

          # Create the prompt in a variable
          PROMPT="Generate professional release notes for LLxprt Code version ${RELEASE_TAG} comparing to previous release ${LAST_TAG}. NO EMOJIS. Include sections: Release Focus, Features, Bug Fixes, Installation. Add comparison link at end. Commits: $(cat commits.txt)"

          # Try LLxprt generation
          set +e
          npx @vybestack/llxprt-code@latest \
            --no-interactive \
            --provider gemini \
            --model gemini-2.0-flash-exp \
            --key "${GEMINI_API_KEY}" \
            --prompt "${PROMPT}" > generated-notes.md 2>&1
          LLXPRT_EXIT=$?
          set -e

          # Check if generation succeeded
          if [ $LLXPRT_EXIT -eq 0 ] && [ -s generated-notes.md ]; then
            echo "Using LLxprt-generated release notes"
            cp generated-notes.md release-notes.md
          else
            echo "Falling back to basic release notes"
            # Write basic release notes
            echo "## Release ${RELEASE_TAG}" > release-notes.md
            echo "" >> release-notes.md
            echo "### Installation & Upgrade" >> release-notes.md
            echo "" >> release-notes.md
            echo "#### Install" >> release-notes.md
            echo '```bash' >> release-notes.md
            echo "npm install -g @vybestack/llxprt-code" >> release-notes.md
            echo '```' >> release-notes.md
            echo "" >> release-notes.md
            echo "#### Upgrade" >> release-notes.md
            echo '```bash' >> release-notes.md
            echo "npm update -g @vybestack/llxprt-code" >> release-notes.md
            echo '```' >> release-notes.md
            echo "" >> release-notes.md
            echo "### Changes" >> release-notes.md
            echo "" >> release-notes.md
            cat commits.txt >> release-notes.md
          fi

          # Add comparison link if we have a real previous tag
          if [[ "${LAST_TAG}" != $(git rev-list --max-parents=0 HEAD) ]]; then
            echo "" >> release-notes.md
            echo "---" >> release-notes.md
            echo "" >> release-notes.md
            echo "**Full Changelog**: https://github.com/${GITHUB_REPOSITORY}/compare/${LAST_TAG}...${RELEASE_TAG}" >> release-notes.md
          fi

          echo "Release notes generated"

      - name: 'Create GitHub Release and Tag'
        if: |-
          ${{ steps.vars.outputs.is_dry_run == 'false' }}
        env:
          GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
          RELEASE_BRANCH: '${{ steps.release_branch.outputs.BRANCH_NAME }}'
          RELEASE_TAG: '${{ steps.version.outputs.RELEASE_TAG }}'
        run: |-
          gh release create "${RELEASE_TAG}" \
            bundle/llxprt.js \
            --target "${RELEASE_BRANCH}" \
            --title "Release ${RELEASE_TAG}" \
            --notes-file release-notes.md

      - name: 'Create Issue on Failure'
        if: |-
          ${{ failure() }}
        env:
          GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
          RELEASE_TAG: '${{ steps.version.outputs.RELEASE_TAG }} || "N/A"'
          DETAILS_URL: '${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}'
        run: |-
          gh issue create \
            --title "Release Failed for ${RELEASE_TAG} on $(date +'%Y-%m-%d')" \
            --body "The release workflow failed. See the full run for details: ${DETAILS_URL}" \
            --label "kind/bug,release-failure"
