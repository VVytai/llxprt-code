
> @vybestack/llxprt-code@0.3.4 test
> npm run test --workspaces --if-present


> @vybestack/llxprt-code-a2a-server@0.3.4 test
> vitest run


 RUN  v3.2.4 /Volumes/XS1000/acoliver/projects/merge/llxprt-code/packages/a2a-server

 ✓ src/persistence/gcs.test.ts (10 tests) 9ms
stdout | src/agent/task.test.ts > Task > scheduleToolCalls should not modify the input requests array
[INFO] 2025-09-18 13:34:21.575 PM -- [Task] Scheduling batch of 1 tool calls.
[INFO] 2025-09-18 13:34:21.576 PM -- [Task] Scheduler tool calls updated:
{
  "0": "1 (error)"
}
[INFO] 2025-09-18 13:34:21.577 PM -- [Task] All tool calls completed by scheduler (batch):
{
  "0": "1"
}

stdout | src/agent/task.test.ts > Task > scheduleToolCalls should not modify the input requests array
[INFO] 2025-09-18 13:34:21.577 PM -- [Task] Scheduler tool calls updated:

 ✓ src/agent/task.test.ts (1 test) 4ms
 ✓ src/http/app.test.ts (5 tests) 31ms
 ✓ src/http/endpoints.test.ts (5 tests) 134ms

 Test Files  4 passed (4)
      Tests  21 passed (21)
   Start at  13:34:20
   Duration  1.67s (transform 734ms, setup 0ms, collect 4.31s, tests 179ms, environment 0ms, prepare 211ms)

JUNIT report written to /Volumes/XS1000/acoliver/projects/merge/llxprt-code/packages/a2a-server/junit.xml

> @vybestack/llxprt-code@0.3.4 test
> vitest run


 RUN  v3.2.4 /Volumes/XS1000/acoliver/projects/merge/llxprt-code/packages/cli
      Coverage enabled with v8

 ✓ src/ui/hooks/useShellHistory.test.ts (7 tests) 549ms
 ✓ src/integration-tests/test-utils.test.ts (14 tests) 969ms
   ✓ Test Utilities > waitForFile > should wait for file to be created  303ms
   ✓ Test Utilities > waitForFile > should timeout if file is not created  509ms
 ✓ src/ui/components/MemoryUsageDisplay.semantic.test.tsx (5 tests) 624ms
 ✓ test/ui/commands/authCommand-logout.test.ts (21 tests) 597ms
   ✓ AuthCommand - Logout Property-Based Tests > should handle concurrent logout commands safely (with seed=1863403206)  330ms
 ✓ src/ui/components/messages/ToolConfirmationMessage.responsive.test.tsx (10 tests) 419ms
 ✓ src/ui/hooks/useGeminiStream.test.tsx (36 tests) 359ms
[?2004h[?2004l[?2004h[?2004l[?2004h ✓ src/ui/components/AuthDialog.test.tsx (10 tests) 413ms
[?2004l[?2004h[?2004l[?2004h[?2004l[?2004h[?2004l[?2004h[?2004l[?2004h[?2004l[?2004h[?2004l[?2004h[?2004l[?2004h[?2004l[?2004h[?2004l[?2004h[?2004l[?2004h[?2004l[?2004h[?2004l[?2004h[?2004l[?2004h[?2004l ✓ src/ui/hooks/useAtCompletion.test.ts (13 tests) 1019ms
[?2004h[?2004l[?2004h[?2004l[?2004h[?2004l[?2004h[?2004l[?2004h[?2004l[?2004h[?2004l[?2004h[?2004l[?2004h[?2004l[?2004h ✓ src/ui/components/TodoPanel.responsive.test.tsx (7 tests) 59ms
[?2004l[?2004h[?2004l[?2004h[?2004l[?2004h[?2004l[?2004h[?2004l[?2004h[?2004l[?2004h ✓ src/ui/commands/restoreCommand.test.ts (13 tests) 60ms
[?2004l[?2004h[?2004l[?2004h[?2004l[?2004h[?2004l[?2004h[?2004l[?2004h[?2004l[?2004h[?2004l[?2004h[?2004l[?2004h[?2004l[?2004h[?2004l[?2004h[?2004l[?2004h[?2004l[?2004h[?2004l[?2004h ✓ src/ui/hooks/slashCommandProcessor.test.ts (31 tests) 1820ms
[?2004l[?2004h[?2004l[?2004h[?2004l[?2004h[?2004l[?2004h[?2004l[?2004h[?2004l[?2004h[?2004l[?2004h ✓ src/ui/utils/clipboardUtils.test.ts (6 tests) 147ms
[?2004l ✓ src/services/FileCommandLoader.test.ts (35 tests) 72ms
 ✓ src/ui/App.test.tsx (50 tests) 1255ms
 ✓ src/ui/hooks/atCommandProcessor.test.ts (40 tests) 321ms
 ✓ src/ui/components/messages/DiffRenderer.test.tsx (14 tests | 3 skipped) 159ms
 ✓ src/ui/components/shared/RadioButtonSelect.test.tsx (13 tests) 262ms
 ✓ src/ui/components/InputPrompt.paste.test.tsx (3 tests | 1 skipped) 232ms
 ✓ src/ui/components/SettingsDialog.test.tsx (39 tests) 3173ms
   ✓ SettingsDialog > String Settings Editing > should allow editing and committing a string setting  551ms
 ✓ src/ui/components/shared/text-buffer.test.ts (111 tests) 83ms
 ✓ src/ui/hooks/useSlashCompletion.test.ts (47 tests) 3248ms
 ✓ src/ui/components/ProviderModelDialog.responsive.test.tsx (11 tests) 121ms
 ✓ src/ui/hooks/usePrivacySettings.test.ts (4 tests) 200ms
 ✓ src/config/extension.test.ts (34 tests) 167ms
 ✓ src/ui/utils/MarkdownDisplay.test.tsx (16 tests) 296ms
 ✓ src/ui/commands/ideCommand.test.ts (9 tests) 5024ms
   ✓ ideCommand > install subcommand > should install the extension  5019ms
 ✓ src/ui/components/SessionSummaryDisplay.test.tsx (1 test) 53ms
 ✓ src/ui/components/shared/MaxSizedBox.test.tsx (21 tests) 73ms
 ✓ src/ui/hooks/vim.test.ts (87 tests) 183ms
 ✓ src/ui/components/HistoryItemDisplay.test.tsx (7 tests) 60ms
 ✓ src/ui/components/FolderTrustDialog.test.tsx (8 tests) 129ms
 ✓ src/ui/components/ModelStatsDisplay.test.tsx (6 tests) 79ms
 ✓ src/ui/hooks/useCommandCompletion.test.ts (17 tests) 77ms
 ✓ src/ui/components/ProviderModelDialog.test.tsx (7 tests) 57ms
 ✓ src/ui/hooks/useLoadingIndicator.test.ts (6 tests) 121ms
 ✓ src/ui/components/StatsDisplay.test.tsx (12 tests) 176ms
 ✓ src/ui/components/Footer.responsive.test.tsx (22 tests) 103ms
 ✓ src/storage/ConversationStorage.test.ts (11 tests) 79ms
 ✓ src/ui/utils/commandUtils.test.ts (26 tests) 72ms
 ✓ src/ui/components/messages/ToolMessage.test.tsx (11 tests) 69ms
 ✓ src/ui/components/ProviderDialog.responsive.test.tsx (8 tests) 93ms
 ✓ src/ui/commands/setupGithubCommand.test.ts (10 tests | 2 skipped) 49ms
 ✓ src/ui/components/InputPrompt.test.tsx (69 tests | 1 skipped) 6930ms
 ✓ src/ui/hooks/useGitBranchName.test.ts (7 tests) 27ms
 ✓ src/ui/hooks/useInputHistoryStore.test.ts (14 tests) 75ms
 ✓ src/ui/components/messages/ToolConfirmationMessage.test.tsx (10 tests) 105ms
 ✓ src/ui/containers/SessionController.test.tsx (15 tests) 150ms
 ✓ src/ui/contexts/KeypressContext.test.tsx (39 tests) 83ms
 ✓ src/test-utils/responsive-testing.test.tsx (7 tests) 38ms
 ✓ src/ui/components/messages/ToolGroupMessage.test.tsx (14 tests) 104ms
 ✓ src/ui/components/__tests__/LayoutManager.test.tsx (5 tests) 49ms
 ✓ src/utils/userStartupWarnings.test.ts (5 tests) 67ms
 ✓ src/ui/hooks/useResponsive.test.ts (8 tests) 17ms
 ✓ src/ui/components/TodoPanel.semantic.test.tsx (6 tests) 39ms
 ✓ src/ui/components/Footer.test.tsx (14 tests) 63ms
 ✓ src/ui/hooks/useToolScheduler.test.ts (21 tests | 4 skipped) 60ms
 ✓ src/ui/hooks/useAutoAcceptIndicator.test.ts (11 tests) 27ms
 ✓ src/ui/commands/copyCommand.test.ts (11 tests) 17ms
 ✓ src/ui/components/LoadingIndicator.test.tsx (11 tests) 35ms
 ✓ src/ui/components/ShellConfirmationDialog.test.tsx (4 tests) 41ms
 ✓ src/ui/hooks/shellCommandProcessor.test.ts (12 tests) 54ms
 ✓ src/ui/components/ToolStatsDisplay.test.tsx (5 tests) 43ms
 ✓ src/ui/components/ProQuotaDialog.test.tsx (3 tests) 21ms
 ✓ src/ui/components/ContextUsageDisplay.semantic.test.tsx (7 tests) 23ms
 ✓ src/ui/hooks/useInputHistory.test.ts (11 tests) 19ms
 ✓ src/ui/commands/mcpCommand.test.ts (35 tests) 40ms
 ✓ src/ui/commands/initCommand.test.ts (3 tests) 57ms
 ✓ src/ui/hooks/useTodoContinuation.spec.ts (18 tests) 26ms
 ✓ src/ui/contexts/SessionContext.test.tsx (3 tests) 24ms
 ✓ src/ui/hooks/useKeypress.test.ts (18 tests) 25ms
 ✓ src/ui/hooks/useKeypress.test.tsx (3 tests) 22ms
 ✓ src/ui/hooks/useFocus.test.ts (5 tests) 19ms
 ✓ src/auth/oauth-manager.spec.ts (21 tests) 16ms
 ✓ src/commands/mcp/add.test.ts (5 tests) 20ms
 ✓ src/ui/hooks/usePhraseCycler.test.ts (9 tests) 44ms
 ✓ src/config/settings.test.ts (57 tests | 1 skipped) 30ms
 ✓ src/ui/themes/semantic-tokens.test.ts (13 tests) 16ms
 ✓ src/ui/hooks/useStableCallback.test.ts (5 tests) 12ms
 ✓ src/ui/components/ContextIndicator.ui.test.tsx (6 tests) 21ms
 ✓ src/services/CommandService.test.ts (11 tests) 7ms
 ✓ src/ui/hooks/useHistoryManager.test.ts (8 tests) 17ms
 ✓ src/ui/themes/theme-manager.test.ts (18 tests) 58ms
 ✓ src/services/prompt-processors/shellProcessor.test.ts (37 tests) 20ms
 ✓ src/config/settingsSchema.test.ts (14 tests) 12ms
 ✓ src/ui/hooks/useEditorSettings.test.tsx (10 tests) 18ms
 ✓ src/ui/hooks/useReverseSearchCompletion.test.tsx (10 tests) 28ms
 ✓ src/ui/commands/setCommand.test.ts (37 tests) 14ms
 ✓ src/utils/settingsUtils.test.ts (68 tests) 9ms
 ✓ src/commands/extensions/new.test.ts (4 tests) 18ms
 ✓ src/ui/components/shared/vim-buffer-actions.test.ts (74 tests) 11ms
 ✓ src/ui/hooks/useFolderTrust.test.ts (10 tests) 30ms
 ✓ src/ui/utils/secureInputHandler.test.ts (25 tests) 4ms
 ✓ src/commands/mcp/remove.test.ts (2 tests) 17ms
 ✓ src/ui/utils/responsive.test.ts (21 tests) 8ms
 ✓ src/utils/installationInfo.test.ts (16 tests) 6ms
 ✓ src/utils/gitUtils.test.ts (12 tests) 9ms
 ✓ src/providers/logging/git-stats.test.ts (21 tests) 15ms
 ✓ src/utils/handleAutoUpdate.test.ts (10 tests) 9ms
 ✓ src/commands/extensions/install.test.ts (3 tests) 13ms
 ✓ src/ui/commands/profileCommand.test.ts (13 tests) 11ms
 ✓ src/ui/utils/updateCheck.test.ts (12 tests) 22ms
 ✓ src/config/trustedFolders.test.ts (17 tests) 6ms
 ✓ src/utils/privacy/ConversationDataRedactor.test.ts (10 tests) 5ms
 ✓ src/ui/commands/compressCommand.test.ts (5 tests) 5ms
 ✓ src/ui/commands/chatCommand.test.ts (17 tests) 12ms
 ✓ src/ui/App.e2e.test.tsx (3 tests) 1ms
 ✓ src/ui/commands/directoryCommand.test.tsx (7 tests) 5ms
 ✓ src/ui/commands/toolsCommand.test.ts (8 tests) 6ms
 ✓ src/providers/provider-gemini-switching.test.ts (3 tests) 5ms
 ✓ src/validateNonInterActiveAuth.test.ts (9 tests) 7ms
]2;LLxprt - root]2;LLxprt - root ✓ src/gemini.test.tsx (8 tests) 11ms
 ✓ src/nonInteractiveCli.test.ts (7 tests) 8ms
 ✓ src/ui/commands/memoryCommand.test.ts (8 tests) 7ms
 ✓ src/utils/readStdin.test.ts (4 tests) 28ms
 ✓ src/ui/commands/extensionsCommand.test.ts (2 tests) 5ms
 ✓ src/providers/logging/LoggingProviderWrapper.test.ts (7 tests) 18ms
 ✓ src/ui/commands/keyCommand.test.ts (6 tests) 9ms
 ✓ src/ui/commands/toolformatCommand.test.ts (9 tests) 7ms
 ✓ src/ui/commands/statsCommand.test.ts (3 tests) 5ms
 ✓ src/ui/commands/aboutCommand.test.ts (5 tests) 6ms
 ✓ src/config/logging/loggingConfig.test.ts (14 tests) 4ms
 ✓ src/services/todo-continuation/todoContinuationService.spec.ts (33 tests) 7ms
 ✓ src/ui/keyMatchers.test.ts (33 tests) 5ms
 ✓ src/ui/themes/color-utils.test.ts (16 tests) 14ms
 ✓ src/ui/themes/semantic-resolver.test.ts (6 tests) 13ms
 ✓ src/commands/extensions/uninstall.test.ts (1 test) 8ms
 ✓ src/ui/reducers/appReducer.test.ts (36 tests) 5ms
 ✓ src/ui/commands/docsCommand.test.ts (3 tests) 5ms
 ✓ src/commands/mcp/list.test.ts (4 tests) 10ms
 ✓ src/ui/utils/markdownUtilities.test.ts (7 tests) 2ms
 ✓ src/utils/envVarResolver.test.ts (16 tests) 5ms
 ✓ src/config/keyBindings.test.ts (3 tests) 3ms
 ✓ src/ui/commands/helpCommand.test.ts (2 tests) 3ms
 ✓ src/ui/commands/bugCommand.test.ts (2 tests) 3ms
 ✓ src/test-utils/mockCommandContext.test.ts (3 tests) 3ms
 ✓ src/ui/commands/authCommand.test.ts (21 tests) 9ms
 ✓ src/commands/mcp.test.ts (3 tests) 5ms
 ✓ src/ui/themes/theme.test.ts (11 tests) 5ms
 ✓ src/services/prompt-processors/argumentProcessor.test.ts (2 tests) 3ms
 ✓ src/utils/ConversationContext.test.ts (6 tests) 3ms
 ✓ src/ui/commands/settingsCommand.test.ts (2 tests) 7ms
 ✓ src/ui/commands/themeCommand.test.ts (2 tests) 3ms
 ✓ src/ui/commands/editorCommand.test.ts (2 tests) 6ms
 ✓ src/config/auth.test.ts (8 tests) 5ms
 ✓ src/ui/commands/terminalSetupCommand.test.ts (5 tests) 5ms
 ✓ src/ui/utils/computeStats.test.ts (12 tests) 3ms
 ✓ src/providers/providerManagerInstance.test.ts (5 tests) 6ms
 ✓ src/ui/utils/displayUtils.test.ts (5 tests) 2ms
 ✓ src/ui/utils/highlight.test.ts (11 tests) 3ms
 ✓ src/ui/commands/clearCommand.test.ts (2 tests) 4ms
 ✓ src/ui/utils/formatters.test.ts (14 tests) 2ms
 ✓ src/config/extensions/variables.test.ts (1 test) 1ms
 ↓ src/providers/logging/performance.test.ts (8 tests | 8 skipped)
 ✓ src/services/BuiltinCommandLoader.test.ts (4 tests) 3ms
 ✓ src/services/McpPromptLoader.test.ts (10 tests) 2ms
 ✓ src/utils/cleanup.test.ts (4 tests) 2ms
 ✓ src/utils/startupWarnings.test.ts (4 tests) 2ms
 ✓ src/ui/components/OAuthCodeDialog.test.tsx (5 tests) 2ms

 Test Files  157 passed | 1 skipped (158)
      Tests  2249 passed | 20 skipped (2269)
   Start at  13:34:21
   Duration  23.59s (transform 4.77s, setup 2.06s, collect 116.77s, tests 32.27s, environment 42.82s, prepare 10.24s)

JUNIT report written to /Volumes/XS1000/acoliver/projects/merge/llxprt-code/packages/cli/junit.xml
 % Coverage report from v8

> @vybestack/llxprt-code-core@0.3.4 test
> vitest run


 RUN  v3.2.4 /Volumes/XS1000/acoliver/projects/merge/llxprt-code/packages/core
      Coverage enabled with v8

 ✓ src/core/logger.test.ts (38 tests) 136ms
 ✓ src/tools/ripGrep.test.ts (36 tests) 327ms
 ✓ src/mcp/token-storage/file-token-storage.test.ts (16 tests) 587ms
 ❯ src/prompt-config/prompt-loader.test.ts (44 tests | 1 failed) 731ms
   ✓ PromptLoader > loadFile > should successfully load a UTF-8 text file 11ms
   ✓ PromptLoader > loadFile > should return error for non-existent file 3ms
   ✓ PromptLoader > loadFile > should reject files with path traversal attempts 1ms
   ✓ PromptLoader > loadFile > should reject files larger than 10MB 28ms
   ✓ PromptLoader > loadFile > should handle empty files 3ms
   ✓ PromptLoader > loadFile > should reject directories 2ms
   ✓ PromptLoader > loadFile > should reject symbolic links 3ms
   ✓ PromptLoader > loadFile > should handle files with invalid UTF-8 2ms
   ✓ PromptLoader > loadFile > should handle permission errors gracefully 2ms
   ✓ PromptLoader > loadFile > should return error for null or undefined file path 1ms
   ✓ PromptLoader > loadFile > should apply compression when requested 4ms
   ✓ PromptLoader > compressContent > should preserve code blocks unchanged 1ms
   ✓ PromptLoader > compressContent > should handle nested code block markers 2ms
   ✓ PromptLoader > compressContent > should handle unclosed code blocks 1ms
   ✓ PromptLoader > compressContent > should compress multiple blank lines to single blank line 1ms
   ✓ PromptLoader > compressContent > should simplify headers beyond level 1 1ms
   ✓ PromptLoader > compressContent > should simplify bold list items 1ms
   ✓ PromptLoader > compressContent > should handle empty content 1ms
   ✓ PromptLoader > compressContent > should remove excessive whitespace 1ms
   ✓ PromptLoader > compressContent > should handle mixed line endings 1ms
   ✓ PromptLoader > compressContent > should preserve code blocks with language identifiers 0ms
   ✓ PromptLoader > loadAllFiles > should load multiple files and return a map 2ms
   ✓ PromptLoader > loadAllFiles > should continue loading even if some files fail 2ms
   ✓ PromptLoader > loadAllFiles > should return empty map for null or empty inputs 0ms
   ✓ PromptLoader > loadAllFiles > should apply compression when requested 1ms
   ✓ PromptLoader > detectEnvironment > should detect git repository 1ms
   ✓ PromptLoader > detectEnvironment > should detect when not in git repository 0ms
   ✓ PromptLoader > detectEnvironment > should detect git repository in parent directory 2ms
   ✓ PromptLoader > detectEnvironment > should detect sandbox environment from environment variables 1ms
   ✓ PromptLoader > detectEnvironment > should detect container environment 1ms
   ✓ PromptLoader > detectEnvironment > should detect IDE companion from environment 1ms
   ✓ PromptLoader > detectEnvironment > should detect IDE companion from .vscode directory 1ms
   ✓ PromptLoader > detectEnvironment > should detect IDE companion from .idea directory 1ms
   ✓ PromptLoader > detectEnvironment > should handle permission errors gracefully 0ms
   ✓ PromptLoader > watchFiles > should return null for non-existent directory 1ms
   ✓ PromptLoader > watchFiles > should return null for invalid callback 1ms
   ✓ PromptLoader > watchFiles > should create watcher for valid directory 3ms
   × PromptLoader > watchFiles > should notify on file changes 308ms
     → expected 0 to be greater than 0
   ✓ PromptLoader > watchFiles > should filter non-markdown files 154ms
   ✓ PromptLoader > watchFiles > should stop watching when stop is called 153ms
   ✓ PromptLoader > edge cases > should handle file approaching 10MB limit with warning 28ms
   ✓ PromptLoader > edge cases > should handle file deleted between stat and read 1ms
   ✓ PromptLoader > edge cases > should normalize mixed line endings in compression 0ms
   ✓ PromptLoader > edge cases > should handle very long lines without truncation 0ms
 ✓ src/prompt-config/prompt-installer.test.ts (47 tests) 248ms
 ✓ src/integration/compression-duplicate-ids.test.ts (2 tests) 390ms
 ✓ src/tools/read-file.test.ts (34 tests) 215ms
 ✓ src/services/history/circular-reference.test.ts (4 tests) 313ms
 ✓ src/services/history/HistoryService.test.ts (20 tests) 1261ms
 ✓ src/services/history/orphaned-tools-comprehensive.test.ts (9 tests | 4 skipped) 323ms
 ✓ src/prompt-config/prompt-service.test.ts (43 tests) 1688ms
 ✓ src/tools/glob.test.ts (34 tests) 1727ms
 ✓ src/tools/read-many-files.test.ts (31 tests) 464ms
 ✓ src/services/history/compression-locking.test.ts (4 tests) 372ms
 ✓ src/utils/filesearch/fileSearch.test.ts (27 tests) 307ms
 ✓ src/services/history/findfiles-circular.test.ts (2 tests) 185ms
 ✓ src/prompt-config/prompt-resolver.test.ts (56 tests) 214ms
 ✓ src/debug/DebugLogger.test.ts (36 tests | 1 skipped) 130ms
 ✓ src/providers/integration/multi-provider.integration.test.ts (11 tests | 1 skipped) 889ms
   ✓ Multi-Provider Integration Tests > Error Handling > should handle missing API key  886ms
 ✓ src/providers/openai/OpenAIProvider.stateful.integration.test.ts (2 tests | 1 skipped) 1057ms
   ✓ OpenAIProvider Stateful Integration > should not break stateless models by correctly passing full message history  1056ms
 ✓ src/utils/bfsFileSearch.test.ts (11 tests) 160ms
 ✓ src/tools/grep.test.ts (24 tests) 390ms
 ✓ src/utils/filesearch/crawler.test.ts (18 tests) 153ms
 ✓ src/services/gitService.test.ts (14 tests) 141ms
 ✓ src/utils/memoryDiscovery.test.ts (16 tests) 323ms
 ✓ src/services/loopDetectionService.test.ts (34 tests) 170ms
 ✓ src/mcp/oauth-provider.test.ts (19 tests) 150ms
 ✓ src/utils/fileUtils.test.ts (62 tests) 222ms
 ✓ src/auth/token-store.spec.ts (20 tests) 225ms
 ✓ src/filters/EmojiFilter.property.test.ts (30 tests) 141ms
 ✓ src/utils/gitIgnoreParser.test.ts (23 tests) 139ms
 ✓ src/services/fileDiscoveryService.test.ts (13 tests) 84ms
 ✓ src/core/subagent.test.ts (19 tests) 164ms
 ✓ src/core/prompts-async.test.ts (9 tests | 1 skipped) 132ms
 ✓ src/mcp/token-storage/keychain-token-storage.test.ts (24 tests) 136ms
 ✓ src/utils/flashFallback.integration.test.ts (4 tests) 235ms
 ✓ src/core/atomic-compression.test.ts (2 tests) 119ms
 ✓ src/utils/getFolderStructure.test.ts (15 tests) 162ms
 ✓ src/tools/write-file.test.ts (28 tests) 86ms
 ✓ src/providers/anthropic/AnthropicProvider.test.ts (11 tests) 14ms
 ✓ src/core/client.test.ts (62 tests | 6 skipped) 114ms
 ✓ src/core/prompts.test.ts (6 tests) 100ms
 ✓ src/telemetry/metrics.test.ts (11 tests) 31ms
 ✓ src/utils/retry.test.ts (13 tests) 21ms
 ✓ src/tools/web-fetch.integration.test.ts (22 tests) 57ms
 ✓ src/tools/smart-edit.test.ts (18 tests) 84ms
 ✓ src/tools/modifiable-tool.test.ts (11 tests) 43ms
 ✓ src/tools/edit.test.ts (43 tests) 113ms
 ✓ src/services/shellExecutionService.test.ts (30 tests) 50ms
 ✓ src/utils/workspaceContext.test.ts (34 tests) 36ms
 ✓ src/auth/oauth-errors.spec.ts (38 tests | 2 skipped) 23ms
 ✓ src/utils/userAccountManager.test.ts (23 tests) 30ms
 ✓ src/providers/anthropic/AnthropicProvider.oauth.test.ts (10 tests) 63ms
 ✓ src/tools/memoryTool.test.ts (19 tests) 32ms
 ✓ src/tools/todo-store.test.ts (12 tests) 24ms
 ✓ src/tools/mcp-tool.test.ts (35 tests) 44ms
 ✓ src/tools/shell.test.ts (21 tests) 58ms
 ✓ src/tools/ls.test.ts (22 tests) 54ms
 ✓ src/tools/web-search.test.ts (9 tests) 67ms
 ✓ src/utils/environmentContext.test.ts (8 tests) 21ms
 ✓ src/utils/schemaValidator.test.ts (7 tests) 22ms
 ✓ src/telemetry/uiTelemetry.test.ts (19 tests) 26ms
 ✓ src/config/flashFallback.test.ts (6 tests) 9ms
 ✓ src/utils/generateContentResponseUtilities.test.ts (36 tests) 5ms
 ✓ src/utils/errorReporting.test.ts (6 tests) 62ms
 ✓ src/utils/editor.test.ts (108 tests) 21ms
 ✓ src/utils/memoryImportProcessor.test.ts (23 tests) 22ms
 ✓ src/config/config.test.ts (46 tests) 21ms
 ✓ src/core/nonInteractiveToolExecutor.test.ts (6 tests) 21ms
 ✓ src/tools/web-fetch.test.ts (7 tests) 23ms
 ✓ src/utils/filesearch/ignore.test.ts (12 tests) 33ms
 ✓ src/core/coreToolScheduler.test.ts (24 tests | 6 skipped) 28ms
 ✓ src/services/shellExecutionService.windows.multibyte.test.ts (5 tests | 1 skipped) 6ms
 ✓ src/services/ClipboardService.test.ts (7 tests) 19ms
 ✓ src/tools/todo-schemas.test.ts (26 tests) 8ms
 ✓ src/code_assist/server.test.ts (7 tests) 22ms
 ✓ src/utils/editCorrector.test.ts (40 tests) 31ms
 ✓ src/filters/EmojiFilter.consistency.test.ts (58 tests) 16ms
 ✓ src/prompt-config/prompt-cache.test.ts (42 tests) 11ms
 ✓ src/tools/todo-write.test.ts (19 tests) 10ms
 ✓ src/mcp/file-token-store.test.ts (27 tests) 9ms
 ✓ src/debug/ConfigurationManager.test.ts (25 tests) 13ms
 ✓ src/tools/shell.multibyte.test.ts (1 test) 19ms
 ✓ src/filters/EmojiFilter.test.ts (68 tests) 14ms
 ✓ src/utils/summarizer.test.ts (8 tests) 18ms
 ✓ src/parsers/TextToolCallParser.test.ts (15 tests) 9ms
 ✓ src/config/config.ephemeral.test.ts (9 tests) 4ms
 ✓ src/config/profileManager.test.ts (17 tests) 13ms
 ✓ src/mcp/oauth-token-storage.test.ts (20 tests) 5ms
 ✓ src/utils/systemEncoding.test.ts (38 tests) 11ms
 ✓ src/debug/FileOutput.test.ts (15 tests) 9ms
 ✓ src/providers/openai/parseResponsesStream.responsesToolCalls.test.ts (7 tests) 8ms
 ✓ src/tools/tool-registry.test.ts (16 tests) 13ms
 ✓ src/tools/mcp-client.test.ts (42 tests) 14ms
 ✓ src/providers/BaseProvider.test.ts (19 tests) 7ms
 ✓ src/utils/secure-browser-launcher.test.ts (14 tests) 7ms
 ✓ src/utils/ignorePatterns.test.ts (28 tests) 7ms
 ✓ src/auth/auth-integration.spec.ts (11 tests) 7ms
 ✓ src/telemetry/telemetry.test.ts (2 tests) 11ms
 ✓ src/core/turn.test.ts (14 tests) 15ms
 ✓ src/mcp/token-storage/hybrid-token-storage.test.ts (11 tests) 9ms
 ✓ src/services/history/ContentConverters.test.ts (30 tests) 7ms
 ✓ src/utils/shell-utils.test.ts (49 tests) 7ms
 ✓ src/providers/openai/buildResponsesRequest.test.ts (22 tests) 7ms
 ✓ src/core/geminiChat.test.ts (29 tests) 7089ms
   ✓ GeminiChat > sendMessageStream with retries > should yield a RETRY event when an invalid stream is encountered  565ms
   ✓ GeminiChat > sendMessageStream with retries > should retry on invalid content and succeed on the second attempt  566ms
   ✓ GeminiChat > sendMessageStream with retries > should fail after all retries on persistent invalid content  1506ms
   ✓ GeminiChat > should correctly retry and append to an existing history mid-conversation  567ms
   ✓ GeminiChat > should retry if the model returns a completely empty stream (no chunks)  569ms
   ✓ GeminiChat > should retry when all content is invalid and succeed on the second attempt  573ms
 ✓ src/ide/process-utils.test.ts (7 tests) 7ms
 ✓ test/settings/SettingsService.spec.ts (31 tests) 8ms
 ✓ src/code_assist/setup.test.ts (7 tests) 5ms
 ✓ src/tools/todo-read.test.ts (13 tests) 6ms
 ✓ src/ide/ide-client.test.ts (4 tests) 6ms
 ✓ src/ide/ide-installer.test.ts (10 tests) 6ms
 ✓ src/prompt-config/TemplateEngine.test.ts (29 tests) 7ms
 ✓ src/utils/paths.test.ts (55 tests) 4ms
 ✓ src/integration-tests/settings-remediation.test.ts (14 tests) 7ms
 ✓ src/ide/ideContext.test.ts (16 tests) 7ms
 ✓ src/telemetry/loggers.test.ts (13 tests) 10ms
 ✓ src/services/shellExecutionService.multibyte.test.ts (2 tests) 4ms
 ✓ src/mcp/oauth-utils.test.ts (21 tests) 7ms
 ✓ src/integration-tests/profile-integration.test.ts (4 tests) 5ms
 ✓ src/providers/openai/openai-oauth.spec.ts (25 tests) 8ms
 ✓ src/utils/filesearch/crawlCache.test.ts (9 tests) 5ms
 ✓ src/providers/openai/estimateRemoteTokens.test.ts (10 tests) 3ms
 ✓ src/mcp/google-auth-provider.test.ts (4 tests) 6ms
 ✓ src/tools/ToolFormatter.test.ts (10 tests) 19ms
 ✓ src/providers/openai/parseResponsesStream.test.ts (11 tests | 5 skipped) 2ms
 ✓ src/integration-tests/todo-system.test.ts (1 test) 3ms
 ✓ test/settings/model-diagnostics.test.ts (5 tests) 2ms
 ✓ src/tools/todo-pause.spec.ts (21 tests) 4ms
 ✓ src/config/endpoints.test.ts (26 tests) 4ms
 ✓ src/providers/openai/__tests__/formatArrayResponse.test.ts (13 tests) 2ms
 ✓ src/auth/precedence.test.ts (19 tests) 5ms
 ✓ src/providers/logging/ProviderPerformanceTracker.test.ts (8 tests) 6ms
 ✓ src/providers/gemini/GeminiProvider.e2e.test.ts (3 tests) 2ms
 ✓ src/utils/installationManager.test.ts (4 tests) 6ms
 ✓ src/utils/toolOutputLimiter.test.ts (14 tests) 4ms
 ✓ src/mcp/token-store.test.ts (23 tests) 5ms
 ✓ src/services/fileSystemService.test.ts (3 tests) 4ms
 ✓ src/tools/tools.test.ts (11 tests) 4ms
 ✓ src/tools/ToolFormatter.toResponsesTool.test.ts (6 tests) 3ms
 ✓ src/utils/errorParsing.test.ts (21 tests) 4ms
 ✓ src/config/config.alwaysAllow.test.ts (9 tests) 4ms
 ✓ src/core/contentGenerator.test.ts (7 tests) 5ms
 ✓ src/utils/filesearch/result-cache.test.ts (3 tests) 5ms
 ✓ src/utils/safeJsonStringify.test.ts (8 tests) 2ms
 ✓ src/tools/diffOptions.test.ts (9 tests) 3ms
 ✓ src/providers/openai/OpenAIProvider.setModel.test.ts (3 tests) 5ms
 ✓ src/services/tool-call-tracker-service.test.ts (5 tests) 3ms
 ✓ src/utils/unicodeUtils.test.ts (15 tests) 4ms
 ✓ src/code_assist/converter.test.ts (21 tests) 4ms
 ✓ src/integration-tests/provider-settings-integration.spec.ts (4 tests) 6ms
 ✓ src/ide/detect-ide.test.ts (22 tests) 3ms
 ✓ src/providers/openai/buildResponsesRequest.stripToolCalls.test.ts (3 tests) 3ms
 ✓ src/utils/shell-utils.shellReplacement.test.ts (14 tests) 6ms
 ✓ src/mcp/token-storage/base-token-storage.test.ts (12 tests) 4ms
 ✓ src/parsers/TextToolCallParser.multibyte.test.ts (1 test) 2ms
 ✓ src/config/storage.test.ts (16 tests) 3ms
 ✓ src/core/googleGenAIWrapper.test.ts (3 tests) 4ms
 ✓ src/code_assist/oauth2.e2e.test.ts (1 test) 1ms
 ✓ src/providers/openai/ConversationCache.accumTokens.test.ts (9 tests) 2ms
 ✓ src/utils/sanitization.test.ts (14 tests) 2ms
 ✓ src/providers/openai/buildResponsesRequest.undefined.test.ts (3 tests) 2ms
 ✓ src/core/tokenLimits.test.ts (15 tests) 2ms
 ✓ src/hooks/tool-render-suppression-hook.test.ts (2 tests) 2ms
 ✓ src/providers/gemini/GeminiProvider.test.ts (7 tests) 2ms
 ✓ src/utils/partUtils.test.ts (23 tests) 3ms
 ✓ src/providers/ProviderManager.test.ts (2 tests) 3ms
 ✓ src/index.test.ts (1 test) 1ms
 ↓ src/services/shellExecutionService.windows.test.ts (3 tests | 3 skipped)
 ✓ src/providers/ProviderManager.gemini-switch.test.ts (3 tests) 2ms
 ✓ src/providers/anthropic/AnthropicProvider.modelParams.test.ts (6 tests) 3ms
 ✓ src/tools/mcp-client-manager.test.ts (2 tests) 2ms
 ↓ src/services/history/orphaned-tools.test.ts (6 tests | 6 skipped)
 ✓ src/core/__tests__/compression.test.ts (1 test) 1ms
 ✓ src/core/__tests__/compression-logic.test.ts (1 test) 2ms
 ✓ src/utils/tool-utils.test.ts (7 tests) 2ms
 ↓ src/providers/openai/OpenAIProvider.callResponses.stateless.test.ts (5 tests | 5 skipped)
 ↓ src/providers/openai/OpenAIProvider.integration.test.ts (3 tests | 3 skipped)
 ↓ src/providers/openai/OpenAIProvider.responsesIntegration.test.ts (6 tests | 6 skipped)
 ↓ src/providers/openai/ResponsesContextTrim.integration.test.ts (4 tests | 4 skipped)
 ✓ src/auth/qwen-device-flow.spec.ts (24 tests) 41626ms
   ✓ QwenDeviceFlow - Behavioral Tests > Device Flow Initiation > should use correct Qwen authorization endpoint  1375ms
   ✓ QwenDeviceFlow - Behavioral Tests > Token Polling > should poll for token until authorization completes  10010ms
   ✓ QwenDeviceFlow - Behavioral Tests > Token Polling > should use correct Qwen token endpoint  1413ms
   ✓ QwenDeviceFlow - Behavioral Tests > Token Polling > should respect server-specified polling interval  10007ms
   ✓ QwenDeviceFlow - Behavioral Tests > Error Handling > should handle network failures with retry logic  18758ms

⎯⎯⎯⎯⎯⎯⎯ Failed Tests 1 ⎯⎯⎯⎯⎯⎯⎯

 FAIL  src/prompt-config/prompt-loader.test.ts > PromptLoader > watchFiles > should notify on file changes
AssertionError: expected 0 to be greater than 0
 ❯ src/prompt-config/prompt-loader.test.ts:497:29
    495| 
    496|       // Should have received at least one event
    497|       expect(events.length).toBeGreaterThan(0);
       |                             ^
    498|       expect(events.some((e) => e.path === testFile)).toBe(true);
    499| 

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[1/1]⎯

⎯⎯⎯⎯⎯⎯ Unhandled Errors ⎯⎯⎯⎯⎯⎯

Vitest caught 1 unhandled error during the test run.
This might cause false positive tests. Resolve unhandled errors to make sure your tests are not affected.

⎯⎯⎯⎯⎯⎯ Unhandled Error ⎯⎯⎯⎯⎯⎯⎯
TypeError: Promise constructor cannot be invoked without 'new'
 ❯ new mockCall ../../node_modules/@vitest/spy/dist/index.js:96:15
 ❯ new Promise ../../node_modules/tinyspy/dist/index.js:47:39
 ❯ withEnv ../../node_modules/vitest/dist/chunks/runBaseTests.9Ij9_de-.js:88:9
 ❯ processTicksAndRejections node:internal/process/task_queues:105:5
 ❯ run ../../node_modules/vitest/dist/chunks/runBaseTests.9Ij9_de-.js:109:2
 ❯ runBaseTests ../../node_modules/vitest/dist/chunks/base.DfmxU-tU.js:32:2
 ❯ ForksBaseWorker.executeTests ../../node_modules/vitest/dist/workers/forks.js:29:4
 ❯ execute ../../node_modules/vitest/dist/worker.js:108:3
 ❯ onMessage ../../node_modules/tinypool/dist/entry/process.js:39:18

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯


 Test Files  1 failed | 173 passed | 6 skipped (181)
      Tests  1 failed | 3100 passed | 55 skipped (3167)
     Errors  1 error
   Start at  13:34:46
   Duration  42.99s (transform 3.44s, setup 664ms, collect 58.05s, tests 65.64s, environment 24ms, prepare 10.83s)

JUNIT report written to /Volumes/XS1000/acoliver/projects/merge/llxprt-code/packages/core/junit.xml
npm error Lifecycle script `test` failed with error:
npm error code 1
npm error path /Volumes/XS1000/acoliver/projects/merge/llxprt-code/packages/core
npm error workspace @vybestack/llxprt-code-core@0.3.4
npm error location /Volumes/XS1000/acoliver/projects/merge/llxprt-code/packages/core
npm error command failed
npm error command sh -c vitest run


> llxprt-code-vscode-ide-companion@0.3.4 test
> vitest run


 RUN  v3.2.4 /Volumes/XS1000/acoliver/projects/merge/llxprt-code/packages/vscode-ide-companion

 ✓ src/open-files-manager.test.ts (17 tests) 15ms
stderr | src/extension-multi-folder.test.ts > activate with multiple folders > should set a single folder path
updateWorkspace called with  {
  subscriptions: [],
  environmentVariableCollection: {
    replace: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [32mSymbol(Symbol.dispose)[39m: [36m[Function (anonymous)][39m
    }
  },
  globalState: {
    get: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [32mSymbol(Symbol.dispose)[39m: [36m[Function (anonymous)][39m
    },
    update: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [32mSymbol(Symbol.dispose)[39m: [36m[Function (anonymous)][39m
    }
  },
  extensionUri: { fsPath: [32m'/path/to/extension'[39m }
}

stderr | src/extension.test.ts > activate > should show the info message on first activation
updateWorkspace called with  {
  subscriptions: [],
  environmentVariableCollection: {
    replace: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [32mSymbol(Symbol.dispose)[39m: [36m[Function (anonymous)][39m
    }
  },
  globalState: {
    get: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [32mSymbol(Symbol.dispose)[39m: [36m[Function (anonymous)][39m
    },
    update: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [32mSymbol(Symbol.dispose)[39m: [36m[Function (anonymous)][39m
    }
  },
  extensionUri: { fsPath: [32m'/path/to/extension'[39m }
}

stderr | src/extension-multi-folder.test.ts > activate with multiple folders > should set multiple folder paths, separated by OS-specific path delimiter
updateWorkspace called with  {
  subscriptions: [],
  environmentVariableCollection: {
    replace: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [32mSymbol(Symbol.dispose)[39m: [36m[Function (anonymous)][39m
    }
  },
  globalState: {
    get: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [32mSymbol(Symbol.dispose)[39m: [36m[Function (anonymous)][39m
    },
    update: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [32mSymbol(Symbol.dispose)[39m: [36m[Function (anonymous)][39m
    }
  },
  extensionUri: { fsPath: [32m'/path/to/extension'[39m }
}

stderr | src/extension.test.ts > activate > should not show the info message on subsequent activations
updateWorkspace called with  {
  subscriptions: [],
  environmentVariableCollection: {
    replace: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [32mSymbol(Symbol.dispose)[39m: [36m[Function (anonymous)][39m
    }
  },
  globalState: {
    get: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [32mSymbol(Symbol.dispose)[39m: [36m[Function (anonymous)][39m
    },
    update: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [32mSymbol(Symbol.dispose)[39m: [36m[Function (anonymous)][39m
    }
  },
  extensionUri: { fsPath: [32m'/path/to/extension'[39m }
}

stderr | src/extension-multi-folder.test.ts > activate with multiple folders > should set an empty string if no folders are open
updateWorkspace called with  {
  subscriptions: [],
  environmentVariableCollection: {
    replace: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [32mSymbol(Symbol.dispose)[39m: [36m[Function (anonymous)][39m
    }
  },
  globalState: {
    get: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [32mSymbol(Symbol.dispose)[39m: [36m[Function (anonymous)][39m
    },
    update: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [32mSymbol(Symbol.dispose)[39m: [36m[Function (anonymous)][39m
    }
  },
  extensionUri: { fsPath: [32m'/path/to/extension'[39m }
}

stderr | src/extension.test.ts > activate > should register a handler for onDidGrantWorkspaceTrust
updateWorkspace called with  {
  subscriptions: [],
  environmentVariableCollection: {
    replace: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [32mSymbol(Symbol.dispose)[39m: [36m[Function (anonymous)][39m
    }
  },
  globalState: {
    get: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [32mSymbol(Symbol.dispose)[39m: [36m[Function (anonymous)][39m
    },
    update: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [32mSymbol(Symbol.dispose)[39m: [36m[Function (anonymous)][39m
    }
  },
  extensionUri: { fsPath: [32m'/path/to/extension'[39m }
}

stderr | src/extension-multi-folder.test.ts > activate with multiple folders > should update the path when workspace folders change
updateWorkspace called with  {
  subscriptions: [],
  environmentVariableCollection: {
    replace: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [32mSymbol(Symbol.dispose)[39m: [36m[Function (anonymous)][39m
    }
  },
  globalState: {
    get: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [32mSymbol(Symbol.dispose)[39m: [36m[Function (anonymous)][39m
    },
    update: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [32mSymbol(Symbol.dispose)[39m: [36m[Function (anonymous)][39m
    }
  },
  extensionUri: { fsPath: [32m'/path/to/extension'[39m }
}

stderr | src/extension.test.ts > activate > should launch the LLxprt Code when the user clicks the button
updateWorkspace called with  {
  subscriptions: [],
  environmentVariableCollection: {
    replace: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [32mSymbol(Symbol.dispose)[39m: [36m[Function (anonymous)][39m
    }
  },
  globalState: {
    get: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [32mSymbol(Symbol.dispose)[39m: [36m[Function (anonymous)][39m
    },
    update: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [32mSymbol(Symbol.dispose)[39m: [36m[Function (anonymous)][39m
    }
  },
  extensionUri: { fsPath: [32m'/path/to/extension'[39m }
}

stderr | src/extension-multi-folder.test.ts > activate with multiple folders > should update the path when workspace folders change
updateWorkspace called with  {
  subscriptions: [
    [90mundefined[39m,
    [90mundefined[39m,
    [90mundefined[39m,
    [90mundefined[39m,
    { dispose: [36m[Function][39m },
    { dispose: [36m[Function][39m },
    [90mundefined[39m,
    [90mundefined[39m
  ],
  environmentVariableCollection: {
    replace: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [32mSymbol(Symbol.dispose)[39m: [36m[Function (anonymous)][39m
    }
  },
  globalState: {
    get: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [32mSymbol(Symbol.dispose)[39m: [36m[Function (anonymous)][39m
    },
    update: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [32mSymbol(Symbol.dispose)[39m: [36m[Function (anonymous)][39m
    }
  },
  extensionUri: { fsPath: [32m'/path/to/extension'[39m }
}
updateWorkspace called with  {
  subscriptions: [
    [90mundefined[39m,
    [90mundefined[39m,
    [90mundefined[39m,
    [90mundefined[39m,
    { dispose: [36m[Function][39m },
    { dispose: [36m[Function][39m },
    [90mundefined[39m,
    [90mundefined[39m
  ],
  environmentVariableCollection: {
    replace: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [32mSymbol(Symbol.dispose)[39m: [36m[Function (anonymous)][39m
    }
  },
  globalState: {
    get: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [32mSymbol(Symbol.dispose)[39m: [36m[Function (anonymous)][39m
    },
    update: [Function: spy] {
      getMockName: [36m[Function (anonymous)][39m,
      mockName: [36m[Function (anonymous)][39m,
      mockClear: [36m[Function (anonymous)][39m,
      mockReset: [36m[Function (anonymous)][39m,
      mockRestore: [36m[Function (anonymous)][39m,
      getMockImplementation: [36m[Function (anonymous)][39m,
      mockImplementation: [36m[Function (anonymous)][39m,
      mockImplementationOnce: [36m[Function (anonymous)][39m,
      withImplementation: [36m[Function: withImplementation][39m,
      mockReturnThis: [36m[Function (anonymous)][39m,
      mockReturnValue: [36m[Function (anonymous)][39m,
      mockReturnValueOnce: [36m[Function (anonymous)][39m,
      mockResolvedValue: [36m[Function (anonymous)][39m,
      mockResolvedValueOnce: [36m[Function (anonymous)][39m,
      mockRejectedValue: [36m[Function (anonymous)][39m,
      mockRejectedValueOnce: [36m[Function (anonymous)][39m,
      [32mSymbol(Symbol.dispose)[39m: [36m[Function (anonymous)][39m
    }
  },
  extensionUri: { fsPath: [32m'/path/to/extension'[39m }
}

 ✓ src/extension.test.ts (4 tests) 7ms
 ✓ src/extension-multi-folder.test.ts (5 tests | 1 skipped) 7ms

 Test Files  3 passed (3)
      Tests  25 passed | 1 skipped (26)
   Start at  13:35:30
   Duration  346ms (transform 99ms, setup 0ms, collect 369ms, tests 28ms, environment 0ms, prepare 117ms)

